# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
The CheshirePy module lets you access the Cheshire Information Retrieval
system and get results directly in Python.
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_CheshirePy', [dirname(__file__)])
        except ImportError:
            import _CheshirePy
            return _CheshirePy
        if fp is not None:
            try:
                _mod = imp.load_module('_CheshirePy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _CheshirePy = swig_import_helper()
    del swig_import_helper
else:
    import _CheshirePy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def free_all_dtds():
  """free_all_dtds()"""
  return _CheshirePy.free_all_dtds()

def queryparse(*args):
  """queryparse(char query, char attributeSetId) -> RPNQuery"""
  return _CheshirePy.queryparse(*args)

def se_process_query(*args):
  """se_process_query(char arg0, RPNQuery arg1) -> weighted_result"""
  return _CheshirePy.se_process_query(*args)

def se_process_meta(*args):
  """se_process_meta(RPNQuery RPN_Query) -> char"""
  return _CheshirePy.se_process_meta(*args)

def init(*args):
  """init(char config_path) -> int"""
  return _CheshirePy.init(*args)

def showconfig():
  """showconfig() -> char"""
  return _CheshirePy.showconfig()

def getconfigpath():
  """getconfigpath() -> char"""
  return _CheshirePy.getconfigpath()

def getconfigindexnames():
  """getconfigindexnames() -> char"""
  return _CheshirePy.getconfigindexnames()

def setdb(*args):
  """setdb(char dbname) -> int"""
  return _CheshirePy.setdb(*args)

def showdbs():
  """showdbs() -> char"""
  return _CheshirePy.showdbs()

def showdb():
  """showdb() -> char"""
  return _CheshirePy.showdb()

def getdbname():
  """getdbname() -> char"""
  return _CheshirePy.getdbname()

def setresultname(*args):
  """setresultname(char name) -> int"""
  return _CheshirePy.setresultname(*args)

def showresultname():
  """showresultname() -> char"""
  return _CheshirePy.showresultname()

def setnumwanted(*args):
  """setnumwanted(int numwanted) -> int"""
  return _CheshirePy.setnumwanted(*args)

def shownumwanted():
  """shownumwanted() -> int"""
  return _CheshirePy.shownumwanted()

def setsyntax(*args):
  """setsyntax(char syntax) -> int"""
  return _CheshirePy.setsyntax(*args)

def showsyntax():
  """showsyntax() -> char"""
  return _CheshirePy.showsyntax()

def setresultformat(*args):
  """setresultformat(char format) -> int"""
  return _CheshirePy.setresultformat(*args)

def showformat():
  """showformat() -> char"""
  return _CheshirePy.showformat()

def Search(*args):
  """Search(char search) -> weighted_result"""
  return _CheshirePy.Search(*args)

def getnumfound(*args):
  """getnumfound(weighted_result final_set) -> int"""
  return _CheshirePy.getnumfound(*args)

def getrecord(*args):
  """getrecord(weighted_result final_set, int recnum) -> char"""
  return _CheshirePy.getrecord(*args)

def getrelevance(*args):
  """getrelevance(weighted_result final_set, int recnum) -> float"""
  return _CheshirePy.getrelevance(*args)

def closeresult(*args):
  """closeresult(weighted_result final_set)"""
  return _CheshirePy.closeresult(*args)

def CheshireClose():
  """CheshireClose()"""
  return _CheshirePy.CheshireClose()

cvar = _CheshirePy.cvar

