/************************************************************************
*
*       Header Name:    se_web_driver.c
*
*       Programmer:     Ray Larson 
*
*       Purpose:        drive search engine as a cgi script
*                      
*       Usage:          webcheshire searchkey
*
*       Variables:
*
*       Return Conditions and Return Codes:
*
*       Date:           11/1/96
*       Revised:        
*       Version:        1.0
*       Copyright (c) 1996.  The Regents of the University of California
*               All Rights Reserved
*
************************************************************************/
/* Z39.50 Library includes */
#ifdef SOLARIS
#define PLATFORM_INC_MALLOC
#include "libz3950.h"
#include "ini.h"
#endif

#ifdef ALPHA
#include "z3950_3.h"
#include "z_parameters.h"
#include "z3950_intern.h"
#endif

#ifdef HP
#include "z3950_3.h"
#include "z_parameters.h"
#include "z3950_intern.h"
#endif

#include <cheshire.h>
#include "z_parse.h"

#include "dispmarc.h"
#include <dmalloc.h>

SGML_DTD *main_dtd = NULL;

int last_rec_proc; /* used in indexing and parsing code */
int web_cheshire_first_pass = 1;

Tcl_HashTable *current_page_hash_table;

/**** function prototypes ****/
weighted_result *se_process_query(char *, RPNQuery *);
weighted_result *se_pagemerge (weighted_result *inset1, Tcl_HashTable **ht1,
                                weighted_result *inset2, Tcl_HashTable **ht2);

char *se_get_result_filetag(char *);

/*****************************/

int Cheshire_CloseUp(dummy, interp, argc, argv)
    ClientData dummy;			/* Current Session */
    Tcl_Interp *interp;			/* Current interpreter. */
    int argc;				/* Number of arguments. */
    char **argv;			/* Argument strings. */
{
  extern SGML_Doclist  *PRS_first_doc;

  /* free all the outstanding docs  */
  free_doc_list(PRS_first_doc);

  /* free all the DTDs  */
  free_all_dtds();
  
  cf_closeall();

}

int
Cheshire_Search(dummy, interp, argc, argv)
    ClientData dummy;			/* Current Session */
    Tcl_Interp *interp;			/* Current interpreter. */
    int argc;				/* Number of arguments. */
    char **argv;			/* Argument strings. */
{
  RPNQuery *RPN_Query_ptr, *queryparse();
  int i;		  /* loop counter */

  char *cf_name;	  /* name of configuration file */
  char querystring[1000];	/* string to hold query */
  char *filename;
  char *num_req_str, *num_start_str;
  int num_request, num_start, num_end;
  int filetype;
  int set_number = 1;
  int recnum;
  char *result, *se_process_meta();
  char *diagnostic_string(), *diagnostic_addinfo();
  char resultswork[500];
  char buffer[70000];
  int resultlen;
  weighted_result *final_set;	/* result from query processing */

  Tcl_HashEntry *entry;
  Tcl_HashSearch hash_search;

  struct pageitem {
    int pagenum;
    int setindex;
    struct pageitem *next;
  } *lastpage, *page;

  struct docsum{
    int num_pages;
    float sum_wts;
    struct pageitem *page_ptr;
    struct pageitem *lastpage;
  } *doc_wts;

  int BADFLAG=0;


  LOGFILE = stderr;

  if (argc < 2) {
    Tcl_AppendResult(interp, "wrong # args: should be \"", argv[0],
		       " indexname1 search_string1 <boolop> <indexname2>",
		       " <search_string2> <boolop2> etc...\"", (char *) NULL);
	return TCL_ERROR;
      }


  if ((cf_name = Tcl_GetVar(interp, "CHESHIRE_CONFIGFILE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_CONFIGFILE not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if ((filename = Tcl_GetVar(interp, "CHESHIRE_DATABASE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_DATABASE not set ", (char *) NULL);
    return TCL_ERROR;
  }


  if ((num_req_str = Tcl_GetVar(interp, "CHESHIRE_NUMREQUESTED",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if (Tcl_GetInt(interp, num_req_str, &num_request) == TCL_ERROR) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not a number ", 
		     (char *) NULL);
    return TCL_ERROR;
  }	 

  if ((num_start_str = Tcl_GetVar(interp, "CHESHIRE_NUM_START",
					  TCL_GLOBAL_ONLY )) == NULL) {
    num_start = 1;
  }
  else {
    if (Tcl_GetInt(interp, num_start_str, &num_start) == TCL_ERROR) {
      Tcl_AppendResult(interp, "CHESHIRE_NUM_START not a number ", 
		       (char *) NULL);
      return TCL_ERROR;
    }	 
  }

  /* we will count records from 1 */
  if (num_start == 0) num_start = 1;

  /* if we got this far all the required global stuff is in place */
  /* so we can begin to process the query                         */
  if (web_cheshire_first_pass) {
    cf_info_base = (config_file_info *) cf_initialize(cf_name, NULL, NULL);
    web_cheshire_first_pass = 0;
  }

  if (cf_info_base == NULL) {
    Tcl_AppendResult(interp, "Error processing CHESHIRE_CONFIGFILE '", 
		     cf_name, "'", (char *) NULL);
    return TCL_ERROR;
  } 
  
  /* assemble all the parts of the query */
  querystring[0] = '\0';
  for (i=1; i<argc; i++) {
    strcat(querystring,argv[i]);
    strcat(querystring," ");
  }

  RPN_Query_ptr = queryparse(querystring);

  clean_up_query_parse();  
  
  if (strcasecmp(filename, "METADATA") == 0) {
  
    Tcl_AppendElement( interp, "Metadata Query");
    result = se_process_meta(&buffer[0], 70000, RPN_Query_ptr);
    if (result == NULL) {
      int code;
      if (code = diagnostic_get()) {
	sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		code,diagnostic_string(code), diagnostic_addinfo());
	diagnostic_clear();
	Tcl_AppendElement( interp, resultswork);	
      }
    }
    else {
      /* must have it -- so print it */
      
      resultlen = strlen(result);
      if (resultlen == 0)
	Tcl_AppendElement( interp,"No result-- must not be a clustered file");
      else
	Tcl_AppendElement( interp, result);
    }
  }
  else {
    /* actually process the query and retrieve the results */
    final_set = se_process_query(filename, RPN_Query_ptr);

    FreeRPNQuery(RPN_Query_ptr);
    
    if (final_set != NULL) {
      
      /* we won't store result sets in the web version... */
      /* if (final_set->num_hits > 1) {                   */
      /* char temp_input[80];                             */
      /*                                                  */	
      /* sprintf(result_set_name, "S%d", set_number++);   */
      /*                                                  */
      /* if (se_store_result_set(final_set, result_set_name, filename, 1) */
      /*    == FAIL) {                                    */
      /*                                                  */
      /*  set_number--;                                   */
      /* }                                                */
	  
      if (final_set->num_hits == 0) { /* No hits */
	int code;
	sprintf( resultswork, "{Hits 0} {Returning 0} {Start 0}");
	Tcl_AppendElement( interp, resultswork );
	if (code = diagnostic_get()) {
	  sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		  code,diagnostic_string(code), diagnostic_addinfo());
	  diagnostic_clear();
	  Tcl_AppendElement( interp, resultswork );
	}
	Tcl_AppendElement( interp, "No matching records found" );
	FREE(final_set);
	return TCL_OK;
      }

      /* One or more hits */
      if ((num_request + (num_start-1)) > final_set->num_hits)
	num_end = final_set->num_hits;
      else
	num_end = (num_start-1) + num_request;

      if ((num_request = num_end - (num_start-1)) == 0)
	num_request = 1;

      if (num_request < 0) {
	num_start = 1;
	num_request = 0;
      }

      if (final_set->result_type & PAGED_RESULT) {

	sprintf(resultswork, "{PAGEHits %d} {Returning %d} {Start %d}",
		final_set->num_hits, num_request, num_start); 
	Tcl_AppendElement(interp, resultswork);
	

	for(i=(num_start-1);i<num_end; i++) {
	  char *psuedo_doc, *se_psuedo_doc();
	  psuedo_doc = se_psuedo_doc(i, final_set);
	  Tcl_AppendElement(interp, psuedo_doc);	  
	}
      }
      else if (final_set->result_type & PAGED_DOC_RESULT) {

	sprintf(resultswork, "{PageDocHits %d} {Returning %d} {Start %d}",
		final_set->num_hits, num_request, num_start); 
	Tcl_AppendElement(interp, resultswork);
	
	for(i=(num_start-1);i<num_end;i++) {
	  char *doc, *GetRawSGML();

	  recnum =  final_set->entries[i].record_num;
	  buffer[0] = '\0';
	  
	  doc = GetRawSGML(filename, recnum);

	  /* Add the final rank and the raw document to the results */
	  if (doc) {
	    sprintf (buffer, "%f {%s} {", final_set->entries[i].weight, 
		     doc);
	    
	    /* get the page hash info for final_set1 */
	    entry = Tcl_FindHashEntry(current_page_hash_table, 
				      (void *)((long)recnum));    
	    if (entry == NULL) {
	      /* there are no page hits for this doc */
	      strcat(buffer, "}");
	    }
	    else {
	      doc_wts = (struct docsum *) Tcl_GetHashValue(entry);
	      /* we won't include weights for this type of search */
	      for (page = doc_wts->page_ptr; page != NULL; page = page->next) {
		sprintf(resultswork, "%d ", page->pagenum);
		strcat(buffer, resultswork);
	      }
	      buffer[strlen(buffer)-1] = '}'; 
	    }
	  }
	  /* free up the document, should be finished with it */
	  FREE(doc);
	}
	Tcl_AppendElement(interp, buffer);
	
      }
      else {
	sprintf(resultswork, "{Hits %d} {Returning %d} {Start %d}",
		final_set->num_hits, num_request, num_start); 
	Tcl_AppendElement(interp, resultswork);
	
	for(i=(num_start-1);i<num_end;i++) {
	  char *doc, *GetRawSGML();
	
	  doc = GetRawSGML(filename, final_set->entries[i].record_num);
	  /* just append the raw document to the results */
	  if (doc) 
	    Tcl_AppendElement(interp, doc);
	}      
      }
    }
    else { /* NULL final-set from search */
      sprintf( resultswork, "{Hits 0} {Returning 0} {NO SUCH INDEX?}");
      Tcl_AppendElement( interp, resultswork );
    }
  }
  
  return TCL_OK;

}


/* TileBar_Search implements a search for two sets of  concepts/terms */
/* from a paged index                                                 */
/* these are then returned as a Tcl list in a format for presentation */
/* via the DLIB java client                                           */
int
TileBar_Search(dummy, interp, argc, argv)
    ClientData dummy;			/* Current Session */
    Tcl_Interp *interp;			/* Current interpreter. */
    int argc;				/* Number of arguments. */
    char **argv;			/* Argument strings. */
{
  RPNQuery *RPN_Query_ptr1, *RPN_Query_ptr2, *queryparse();

  int i;		  /* loop counter */

  char *cf_name;	  /* name of configuration file */
  char querystring1[1000];	/* string to hold query */
  char querystring2[1000];	/* string to hold query */
  char *filename;
  char *num_req_str, *num_start_str;
  int num_request, num_start, num_end, recnum;
  int filetype;
  int set_number = 1;
  char *result, *se_process_meta();
  char *diagnostic_string(), *diagnostic_addinfo();
  char resultswork[500];
  char buffer[70000];
  int resultlen;

  int BADFLAG=0;

  /* results from query processing */
  weighted_result *concept_set1, *concept_set2; 
  weighted_result *merged_doc_set;
  
  Tcl_HashTable *hashtab1 = NULL, *hashtab2 = NULL;
  Tcl_HashEntry *entry;
  Tcl_HashSearch hash_search;

  struct pageitem {
    int pagenum;
    int setindex;
    struct pageitem *next;
  } *lastpage, *page;

  struct docsum{
    int num_pages;
    float sum_wts;
    struct pageitem *page_ptr;
    struct pageitem *lastpage;
  } *doc_wts;


  LOGFILE = stderr;

  if (argc != 4) {
    Tcl_AppendResult(interp, "wrong # args: should be \"", argv[0],
		     "index_name {concept1 terms} {concept2 terms}\n", 
		     (char *) NULL);
    return TCL_ERROR;
  }

  if ((cf_name = Tcl_GetVar(interp, "CHESHIRE_CONFIGFILE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_CONFIGFILE not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if ((filename = Tcl_GetVar(interp, "CHESHIRE_DATABASE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_DATABASE not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if ((num_req_str = Tcl_GetVar(interp, "CHESHIRE_NUMREQUESTED",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if (Tcl_GetInt(interp, num_req_str, &num_request) == TCL_ERROR) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not a number ", 
		     (char *) NULL);
    return TCL_ERROR;
  }	 

  if ((num_start_str = Tcl_GetVar(interp, "CHESHIRE_NUM_START",
					  TCL_GLOBAL_ONLY )) == NULL) {
    num_start = 1;
  }
  else {
    if (Tcl_GetInt(interp, num_start_str, &num_start) == TCL_ERROR) {
      Tcl_AppendResult(interp, "CHESHIRE_NUM_START not a number ", 
		       (char *) NULL);
      return TCL_ERROR;
    }	 
  }

  /* we will count records from 1 */
  if (num_start == 0) num_start = 1;

  /* if we got this far all the required global stuff is in place */
  /* so we can begin to process the query                         */
  if (web_cheshire_first_pass) {
    cf_info_base = (config_file_info *) cf_initialize(cf_name, NULL, NULL);
    web_cheshire_first_pass = 0;
  }

  if (cf_info_base == NULL) {
    Tcl_AppendResult(interp, "Error processing CHESHIRE_CONFIGFILE '", 
		     cf_name, "'", (char *) NULL);
    return TCL_ERROR;
  } 
  
  /* assemble all the parts of the query         */
  /* the concept strings are bracketed so that   */
  /* boolean ops are treated as stopwords        */
  querystring1[0] = '\0';
  strcat(querystring1, argv[1]); /* argv[1] should be the index to use */
  strcat(querystring1," @ {");
  /* BOOL strcat(querystring1," {"); */
  strcat(querystring1, argv[2]);
  strcat(querystring1, "}");
  RPN_Query_ptr1 = queryparse(querystring1);
  clean_up_query_parse();  

  querystring2[0] = '\0';
  strcat(querystring2, argv[1]); /* argv[1] should be the index to use */
  strcat(querystring2," @ {");
  /* BOOL strcat(querystring2," {"); */
  strcat(querystring2, argv[3]);
  strcat(querystring2, "}");
  RPN_Query_ptr2 = queryparse(querystring2);
  clean_up_query_parse();  

  
   /* actually process the queries and retrieve the results */
  concept_set1 = se_process_query(filename, RPN_Query_ptr1);
  /*if (se_store_result_set(concept_set1,"tilebars1",filename, 1) == FAIL) {*/
  /*Tcl_AppendResult(interp, "Unable to store intermediate result set 1 ",  */
  /*      (char *) NULL);                                                   */
  /*  return TCL_ERROR;                                                     */
  /*  }                                                                     */
  FreeRPNQuery(RPN_Query_ptr1);
  concept_set2 = se_process_query(filename, RPN_Query_ptr2);
  /*if (se_store_result_set(concept_set2,"tilebars2",filename, 1) == FAIL) {*/
  /*Tcl_AppendResult(interp, "Unable to store intermediate result set 2 ",  */
  /*	     (char *) NULL);                                                */
  /*  return TCL_ERROR;                                                     */
  /*  }                                                                     */
  FreeRPNQuery(RPN_Query_ptr2);
    
  if (concept_set1 != NULL && concept_set2 != NULL) {
      
    if ((concept_set1->result_type & PAGED_RESULT) != PAGED_RESULT
        || (concept_set2->result_type & PAGED_RESULT) != PAGED_RESULT) {
      Tcl_AppendResult(interp, "Index didn't return PAGES ",
		       (char *) NULL);
      FREE(concept_set1);
      FREE(concept_set2);
      return TCL_ERROR;
    }

    if (concept_set1->num_hits == 0
	|| concept_set2->num_hits == 0) { /* No hits */
      int code;
      sprintf( resultswork, "{TBHits 0} {Returning 0} {Start 0}");
      Tcl_AppendElement( interp, resultswork );
      if (code = diagnostic_get()) {
	sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		code,diagnostic_string(code), diagnostic_addinfo());
	diagnostic_clear();
	Tcl_AppendElement( interp, resultswork );
      }
      
      if (concept_set1->num_hits == 0)
	Tcl_AppendElement( interp, "No matching records found for concept 1" );
      if (concept_set2->num_hits == 0)
	Tcl_AppendElement( interp, "No matching records found for concept 2" );
      FREE(concept_set1);
      FREE(concept_set2);
      return TCL_OK;
    }

    merged_doc_set = se_pagemerge(concept_set1, &hashtab1, 
				   concept_set2, &hashtab2);


    if (merged_doc_set == NULL) { /* No pages with both concepts */
      int code;
      sprintf( resultswork, "{TBHits 0} {Returning 0} {Start 0}");
      Tcl_AppendElement( interp, resultswork );
      if (code = diagnostic_get()) {
	sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		code,diagnostic_string(code), diagnostic_addinfo());
	diagnostic_clear();
	Tcl_AppendElement( interp, resultswork );
      }
      Tcl_AppendElement( interp, 
			"No pages containing both concepts" );
      FREE(concept_set1);
      free_page_hash_tab(hashtab1);
      FREE(concept_set2);
      free_page_hash_tab(hashtab2);
      return TCL_OK;
    }
    
    if (merged_doc_set->num_hits == 0) { /* No hits */
      int code;
      sprintf( resultswork, "{TBHits 0} {Returning 0} {Start 0}");
      Tcl_AppendElement( interp, resultswork );
      if (code = diagnostic_get()) {
	sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		code,diagnostic_string(code), diagnostic_addinfo());
	diagnostic_clear();
	Tcl_AppendElement( interp, resultswork );
      }
      Tcl_AppendElement( interp, 
			"No matching records containing both concepts" );
      FREE(concept_set1);
      free_page_hash_tab(hashtab1);
      FREE(concept_set2);
      free_page_hash_tab(hashtab2);
      return TCL_OK;
    }

    /* One or more hits */
    if ((num_request + (num_start-1)) > merged_doc_set->num_hits)
      num_end = merged_doc_set->num_hits;
    else
      num_end = (num_start-1) + num_request;
    
    if ((num_request = num_end - (num_start-1)) == 0)
      num_request = 1;
    
    if (num_request < 0) {
      num_start = 1;
      num_request = 0;
    }

    sprintf(resultswork, "{TBHits %d} {Returning %d} {Start %d}",
	    merged_doc_set->num_hits, num_request, num_start); 
    Tcl_AppendElement(interp, resultswork);
    
    for(i=(num_start-1);i<num_end;i++) {
      char *doc, *GetRawSGML();
      
      recnum =  merged_doc_set->entries[i].record_num;
      buffer[0] = '\0';

      doc = GetRawSGML(filename, recnum);

      /* just append the raw document to the results */
      if (doc) {
	sprintf (buffer, "%f {%s} {", merged_doc_set->entries[i].weight, 
		 doc);
	
	/* get the page hash info for concept_set1 */
	entry = Tcl_FindHashEntry(hashtab1, (void *)recnum);    
	if (entry == NULL) {
	  /* there are no page hits for this doc */
	  strcat(buffer, "} {");
	}
	else {
	  doc_wts = (struct docsum *) Tcl_GetHashValue(entry);

	  for (page = doc_wts->page_ptr; page != NULL; page = page->next) {
	    sprintf(resultswork, "{%08d %f} ", page->pagenum,
		    concept_set1->entries[page->setindex].weight);
	    strcat(buffer, resultswork);
	  }
	  buffer[strlen(buffer)-1] = '}';
	  strcat(buffer, " {");
	}

	/* get the page hash info for concept_set2 */
	entry = Tcl_FindHashEntry(hashtab2, (void *)recnum);    
	if (entry == NULL) {
	  /* there are no page hits for this doc */
	  strcat(buffer, "}");
	}
	else {
	  doc_wts = (struct docsum *) Tcl_GetHashValue(entry);
	  for (page = doc_wts->page_ptr; page != NULL; page = page->next) {
	    sprintf(resultswork, "{%08d %f} ", page->pagenum,
		    concept_set2->entries[page->setindex].weight);
	    strcat(buffer, resultswork);
	  }
	  buffer[strlen(buffer)-1] = '}';
	}

	Tcl_AppendElement(interp, buffer);
	/* free up the document, should be finished with it */
	FREE(doc);
      }
    }
    /* free the hash tables and result sets */
    FREE(concept_set1);
    free_page_hash_tab(hashtab1);
    FREE(concept_set2);
    free_page_hash_tab(hashtab2);
    FREE(merged_doc_set);
  }
  else { /* NULL final-set from search */
    sprintf( resultswork, 
	    "{TBHits 0} {Returning 0} {Start 0} {NO SUCH INDEX?}");
    Tcl_AppendElement( interp, resultswork );
  }

  return TCL_OK;

}

int
TermFreq_Search(dummy, interp, argc, argv)
    ClientData dummy;			/* Current Session */
    Tcl_Interp *interp;			/* Current interpreter. */
    int argc;				/* Number of arguments. */
    char **argv;			/* Argument strings. */
{
  RPNQuery *RPN_Query_ptr, *queryparse();

  int i;		  /* loop counter */

  char *cf_name;	  /* name of configuration file */
  char querystring[1000];	/* string to hold query */
  char *filename;
  char *num_req_str, *num_start_str;
  int num_request, num_start, num_end;
  int filetype;
  int set_number = 1;
  char *result, *se_process_meta();
  char *diagnostic_string(), *diagnostic_addinfo();
  char resultswork[500];
  char buffer[70000];
  int resultlen;
  weighted_result *final_set;	/* result from query processing */
  
  LOGFILE = stderr;

  if (argc < 2) {
    Tcl_AppendResult(interp, "wrong # args: should be \"", argv[0],
		       " indexname1 search_string1 <boolop> <indexname2>",
		       " <search_string2> <boolop2> etc...\"", (char *) NULL);
	return TCL_ERROR;
      }


  if ((cf_name = Tcl_GetVar(interp, "CHESHIRE_CONFIGFILE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_CONFIGFILE not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if ((filename = Tcl_GetVar(interp, "CHESHIRE_DATABASE",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_DATABASE not set ", (char *) NULL);
    return TCL_ERROR;
  }


  if ((num_req_str = Tcl_GetVar(interp, "CHESHIRE_NUMREQUESTED",
					  TCL_GLOBAL_ONLY )) == NULL) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not set ", (char *) NULL);
    return TCL_ERROR;
  }

  if (Tcl_GetInt(interp, num_req_str, &num_request) == TCL_ERROR) {
    Tcl_AppendResult(interp, "CHESHIRE_NUMREQUESTED not a number ", 
		     (char *) NULL);
    return TCL_ERROR;
  }	 

  if ((num_start_str = Tcl_GetVar(interp, "CHESHIRE_NUM_START",
					  TCL_GLOBAL_ONLY )) == NULL) {
    num_start = 1;
  }
  else {
    if (Tcl_GetInt(interp, num_start_str, &num_start) == TCL_ERROR) {
      Tcl_AppendResult(interp, "CHESHIRE_NUM_START not a number ", 
		       (char *) NULL);
      return TCL_ERROR;
    }	 
  }
  /* we will count records from 1 */
  if (num_start == 0) num_start = 1;

  /* if we got this far all the required global stuff is in place */
  /* so we can begin to process the query                         */
  if (web_cheshire_first_pass) {
    cf_info_base = (config_file_info *) cf_initialize(cf_name, NULL, NULL);
    web_cheshire_first_pass = 0;
  }

  if (cf_info_base == NULL) {
    Tcl_AppendResult(interp, "Error processing CHESHIRE_CONFIGFILE '", 
		     cf_name, "'", (char *) NULL);
    return TCL_ERROR;
  } 
  
  /* assemble all the parts of the query */
  querystring[0] = '\0';
  for (i=1; i<argc; i++) {
    strcat(querystring,argv[i]);
    strcat(querystring," ");
  }

  RPN_Query_ptr = queryparse(querystring);

  clean_up_query_parse();  
  
  if (strcasecmp(filename, "METADATA") == 0) {
  
    Tcl_AppendElement( interp, "Metadata Query");
    result = se_process_meta(&buffer[0], 70000, RPN_Query_ptr);
    if (result == NULL) {
      int code;
      if (code = diagnostic_get()) {
	sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		code,diagnostic_string(code), diagnostic_addinfo());
	diagnostic_clear();
	Tcl_AppendElement( interp, resultswork);	
      }
    }
    else {
      /* must have it -- so print it */
      
      resultlen = strlen(result);
      if (resultlen == 0)
	Tcl_AppendElement( interp,"No result-- must not be a clustered file");
      else
	Tcl_AppendElement( interp, result);
    }
  }
  else {
    /* actually process the query and retrieve the results */
    final_set = se_process_query(filename, RPN_Query_ptr);
    
    FreeRPNQuery(RPN_Query_ptr);
    
    if (final_set != NULL) {
      
      /* we won't store result sets in the web version... */
      /* if (final_set->num_hits > 1) {                   */
      /* char temp_input[80];                             */
      /*                                                  */	
      /* sprintf(result_set_name, "S%d", set_number++);   */
      /*                                                  */
      /* if (se_store_result_set(final_set, result_set_name, filename, 1) */
      /*    == FAIL) {                                    */
      /*                                                  */
      /*  set_number--;                                   */
      /* }                                                */
	  
      if (final_set->num_hits == 0) { /* No hits */
	int code;
	sprintf( resultswork, "{Hits 0} {Returning 0} {Start 0}");
	Tcl_AppendElement( interp, resultswork );
	if (code = diagnostic_get()) {
	  sprintf(resultswork, "Diagnostic code %d : %s : Addinfo = '%s'\n",
		  code,diagnostic_string(code), diagnostic_addinfo());
	  diagnostic_clear();
	  Tcl_AppendElement( interp, resultswork );
	}
	Tcl_AppendElement( interp, "No matching records found" );
	FREE(final_set);
	return TCL_OK;
      }

      /* One or more hits */
      if ((num_request + (num_start-1)) > final_set->num_hits)
	num_end = final_set->num_hits;
      else
	num_end = (num_start-1) + num_request;

      if ((num_request = num_end - (num_start-1)) == 0)
	num_request = 1;

      if (num_request < 0) {
	num_start = 1;
	num_request = 0;
      }

      if (final_set->result_type & PAGED_RESULT) {

	sprintf(resultswork, "{PAGEHits %d} {Returning %d} {Start %d}",
		final_set->num_hits, num_request, num_start); 
	Tcl_AppendElement(interp, resultswork);
	

	for(i=(num_start-1);i<num_end; i++) {
	  char *psuedo_doc, *se_psuedo_doc();
	  psuedo_doc = se_psuedo_doc(i, final_set);
	  Tcl_AppendElement(interp, psuedo_doc);	  
	}
      }
      else {
	sprintf(resultswork, "{Hits %d} {Returning %d} {Start %d}",
		final_set->num_hits, num_request, num_start); 
	Tcl_AppendElement(interp, resultswork);
	
	for(i=(num_start-1);i<num_end;i++) {
	  char *doc, *GetRawSGML();
	
	  doc = GetRawSGML(filename, final_set->entries[i].record_num);
	  /* just append the raw document to the results */
	  if (doc) 
	    Tcl_AppendElement(interp, doc);
	}      
      }
    }
    else { /* NULL final-set from search */
      sprintf( resultswork, "{Hits 0} {Returning 0} {NO SUCH INDEX?}");
      Tcl_AppendElement( interp, resultswork );
    }
  }
  
  return TCL_OK;

}



/* this function SHOULD be used to give the current id for the current user */
/* thus it needs more work obviously                                        */
int
current_user_id()
{
  return(1);
}

