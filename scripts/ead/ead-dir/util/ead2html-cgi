#!/usr/bin/perl

#Version info: ead2html version 1.0.0
#              javascript ToC 1.2.0
#Author: Robert Sanderson
#Email: azaroth@liv.ac.uk
#Copyright: (c) 1998, 1999 Special Collections and Archives, University of Liverpool Library
#                     All rights reserved
#                     Free use by any non-profit organization

#Usage: ead2html sgmlfile

#
#User definable variables
#

#Comment out the following line if you want to define the input file, then set it in the line after.
#Useful if you're running it on the same file over and over again.
my $sgmlfile = shift;
#my $sgmlfile = "PATH/MYFILE.SGM";

#Change $slash as appropriate for your file system.
#All DOS slashes in double quotes must be doubled, ie "\\" or in single quotes '\'
my $slash = "/";
#my $slash = "\\";
my $htmlcode = ".html";

#The nsgmls/sgmls command to generate the parsed input.
my $command = "./nsgmls -E0 -fnsgmls.txt -l -c dtd/catalog dtd/DTDS/EADSGML.DEC";


#Set to 0 for a non javascript table of contents. (For long files this will probably be inadvisable)
my $JAVASCRIPT = 1;
#Set to 0 to not do a concordance of controlaccess tags
#NB This has not been coded yet, due to lack of demand.
my $CONCORD = 0;

# Don't change these, down to '#End'
my $rindex = rindex($sgmlfile, $slash) +1;
my $basename = substr($sgmlfile, $rindex, index($sgmlfile, ".") - $rindex);
if ($htmlcode eq ".htm") {
  #OS doesn't support long file names
  $basename = substr($basename, 0, 5);
}
my $filenumber = "0";
my $htmlname = $basename . $filenumber;
my $firsthtmlname = $htmlname;
#End 

#The directory to install the main file into. (Must end in a slash)
my $htmldir = "../htdocs/ead/html/";
my $htmlpath = "http://sca.lib.liv.ac.uk/ead/html/";

#The directory below $htmldir to install the other files into.
 #Eg if $htmldir is "~/public_html/" and $subhtmldir is "sgml/" then all but the main file
#will go into ~/public_html/sgml/
#If you want to split up the HTML, the second version will create directories based on the 
#name of the sgml file.
my $subhtmldir = "";
#my $subhtmldir = $basename . "/";

#The table of contents frame filename
my $tocframename = "tocf" . $htmlcode;

#The main frameset filename
my $framesetname = $basename;
my $framesetnum = "";

#Number of entries in a ToC before file splitting.
my $max_toc_entries = 10000;
my $spliteachtop = 0;

#The HTML title, if not guessable from TITLEPROPER text
my $title = $basename;

#Default title to use if none are given
my $default_title = "Subgroup";
#my $default_title = "---"; #Not all titleless groups are subgroups

#Process EADHEADER information
my $header_info = 1;

#Footer info for each file, if it's not in <footer>
my $footer = "";

#if no_admininfo_order is true, then the text will be processed without subtags. 
#Doesn't look as good IMHO.
my $no_admininfo_order = 0;
my @admininfo_order = ("CUSTODHIST", "ACQINFO", "PROCESSINFO", "APPRAISAL", "ACCESSRESTRICT", "USERESTRICT", "ALTFORMAVAIL", "NOTE", "PREFERCITE");

#Order for ADD subtags to be processed in.
#Any data not in these tags will be put at the end.
my @ADDorder = ("INDEX", "FILEPLAN", "RELATEDMATERIAL", "SEPARATEDMATERIAL", "BIBLIOGRAPHY");

#The headings for the HTML. 
#Make sure that the equivalent endheading is there.
my @beginheadings = ("<h1>",
		     "<center><h2>",
		     "<center><h3>",
		     "<h3>",
		     "<h4>",
		     "<p><i>",
		     "<p><font color = red>",
		     "<p><font color = green>",
		     "<p><font color = black>"
);

my @endheadings = ("</h1>",
		   "</h2></center>",
		   "</h3></center>",
		   "</h3>",
		   "</h4>",
		   "</i></p>",
		   "</font></p>",
		   "</font></p>",
		   "</font></p>"
);


#Colours for the javascript ToC levels.
my @js_colours = ("#ff0000", "#cc3333", "#aa5555", "#997777", "#888888", "#555555", "#333333", "#000000", "#000000", "#000000");


### Style ###
#Win95:   Looks like the system devices list with +s and -s in red for the list
#Altima:  Has light blue bars and trianges for open and close.

#my $style = "Win95";
my $style = "Altima";


#If graphics is false, then ' ', '+' and '-' will be used for the ToC.
#Otherwise the following images will be used.
my $graphics = 1;
my $itemfile = "blank.gif";
#my $itemfile = "dot.gif";
my $expandfile = "plus.gif";
my $contractfile = "minus.gif";
if ($style eq "Altima") {
  $expandfile = "closed.gif";
  $contractfile = "opened.gif";
}

my $expanddir = "expand directory";
#my $expanddir = "...";
my $tocHeading = "Table of Contents";

my $toctabpad = 0;
my $toctabspace = 0;
my $toctabbg = "white";
my $toctabborder = 0;
if ($style eq "Altima") {
  $toctabpad = 1;
  $toctabspace = 1;
  $toctabbg = "lightblue";
  $toctabborder = 0;
}


#If you have non standard (ie OTHERLEVEL) C levels, add them here.
my %clevels = ("Group" => "01",
	       "Subgroup" => "02",
	       "Piece" => "03",
	       "Item" => "03",
	       "item" => "03",
	       "piece" => "03",
	       "group" => "01",
	       "subgroup" => "02",
	       "GROUP" => "01",
	       "SUBGROUP" => "02",
	       "PIECE" => "03",
	       "SERIES" => "01",
	       "SUBSERIES" => "02",
	       "ITEM" => "03"
);

#Default titles if HEAD isn't present. From Beta EAD Applications Guidelines.
#Tag names need to be all capital letters.

my %headwrapfuncs = ("BIOGHIST" => "Biography or History",
		     "SCOPECONTENT" => "Scope and Content",
		     "ODD" => "Other Descriptive Data",
		     "ORGANIZATION" => "Organization",
		     "ARRANGEMENT" => "Arrangement",
		     "NOTE" => "Notes",
		     "CUSTODHIST" => "Custodial History",
		     "ACQINFO" => "Acquisition Information",
		     "PROCESSINFO" => "Processing Information",
		     "APPRAISAL" => "Appraisal",
		     "ACCESSRESTICT" => "Restrictions on Access",
		     "USERESTRICT" => "Restrictions on Use",
		     "ALTFORMAVAIL" => "Alternative Form Available",
		     "PREFERCITE" => "Preferred Citation",
		     "SEPARATEDMATERIAL" => "Separated Material",
		     "RELATEDMATERIAL" => "Related Material",
		     "FILEPLAN" => "File Plan",
		     "INDEX" => "Index",
		     "BIBLIOGRAPHY" => "Bibliography"
		    );


my %textwrapfuncs = ("UNITDATE" => "<br><b>Date</b>: ",
		     "REPOSITORY" => "<br><b>Held at</b>: ",
		     "ORIGINATION" => "<br><b>Origination</b>: ",
		     "PHYSDESC" => "<br><b>Physical Description</b>: ",
		     "UNITLOC" => "<br><b>Location</b>: ",
		     "UNITID" => "<br><b>Reference</b>:  ",
		     "EDITIONSTMT" => "<p><b>Edition</b>: ",
		     "CREATION" => "<br><b>Creation Information</b>: ",
		     "PUBLISHER" => "<p><b>Publisher</b>: ",
		     "AUTHOR" => "<br><b>Author</b>: ",
		     "SPONSOR" => "<br><b>Sponsor</b>: "
		    );
		      

#Some system data. If you have an entity that isn't expanding properly, add it here.

my %entities = ("ndash" => " -- ",
		"mdash" => " --- ",
		"hyphen" => " - ",
		"ldquo" => "&quot;",
		"rdquo" => "&quot;",
		"quot" => "&quot;",
		"amp" => "&amp;",
		"copy" => "&copy;",
		"nbsp" => "&nbsp;",
		"apos" => "'"
);



#
# End of User definable variables. Everything below here should work okay.
#

#
#Code to run, tags to substitute.
#

my %start_process = ("ARCHDESC" => "process_header",
		     "DSC" => "item_info",
		     "NAMELOC" => "strip_element",
		     "C" => "c_wrapper",
		     "C01" => "c_wrapper",
		     "C02" => "c_wrapper",
		     "C03" => "c_wrapper",
		     "C04" => "c_wrapper",
		     "C05" => "c_wrapper",
		     "C06" => "c_wrapper",
		     "C07" => "c_wrapper",
		     "C08" => "c_wrapper",
		     "C09" => "c_wrapper",
		     "C10" => "c_wrapper",
		     "C11" => "c_wrapper",
		     "C12" => "c_wrapper"
);

if (!$CONCORD) {
  $start_process{"CONTROLACCESS"} = "strip_element";
}

my %end_process = ("ARCHDESC" => "last_item",
		   "ADD" => "make_ADD",
		   "EAD" => "make_eof"
);

my %ignore = ("CORPNAME" => 1,
	      "DATE" => 1,
	      "DEFITEM" => 1,
	      "EVENT" => 0,
	      "EVENTGRP" => 1,
	      "EXPAN" => 1,
	      "FAMNAME" => 1,
	      "GEOGNAME" => 1,
	      "ILINK" => 1,
	      "NAME" => 1,
	      "NAMEGRP" => 1,
	      "NAMELOC" => 1,
	      "NMLIST" => 1,
	      "NUM" => 1,
	      "OCCUPATION" => 1,
	      "PERSNAME" => 1,
	      "PTR" => 1,
	      "PTRGRP" => 1,
	      "REF" => 1,
	      "SUBAREA" => 1
	      );

my %substitutes = ("ADDRESS" => "ADDRESS",
		   "ADDRESSLINE" => "BR",
		   "BLOCKQUOTE" => "BLOCKQUOTE",
		   "P" => "P",
		   "LIST" => "UL",
		   "CHRONLIST" => "UL",
		   "CHRONITEM" => "LI",
		   "CHANGE" => "LI",
		   "TITLE" => "I",
		   "DATE" => " ",
		   "DIV" => "HR",
		   "LB" => "BR",
		   "ITEM" => "LI",
		   "INDEX" => "UL",
		   "INDEXENTRY" => "LI"
		  );
		   
my %emphsubstart = ("BOLD" => "<B>",
		    "ITALIC" => "<I>",
		    "BOLDITALIC" => "<B><I>",
		    "BOLDUNDERLINE" => "<B><U>",
		    "BOLDSMCAPS" => "<B>",
		    "BOLDQUOTED" => "&quot;<i><b>",
		    "NONPROPORT" => "<PRE>",
		    "ALTRENDER" => "<B>",
		    "QUOTED" => "&quot;<i>",
		    "SMCAPS" => " ",
		    "SUB" => "<SUB>",
		    "SUPER" => "<SUP>",
		    "UNDERLINE" => "<U>"
		   );

my %emphsubend = ("BOLD" => "</B>",
		    "ITALIC" => "</I>",
		    "BOLDITALIC" => "</I></B>",
		    "BOLDUNDERLINE" => "</U></B>",
		    "BOLDSMCAPS" => "</B>",
		    "BOLDQUOTED" => "</b></i>&QUOT;",
		    "NONPROPORT" => "</PRE>",
		    "ALTRENDER" => "</B>",
		    "QUOTED" => "</i>&quot;",
		    "SMCAPS" => " ",
		    "SUB" => "</SUB>",
		    "SUPER" => "</SUP>",
		    "UNDERLINE" => "</U>"
		 );
	      

#
#-----------------------------------------------------------------------------
#

#NB: Doesn't use sgmlspl.pl.
#I'd rather write the postprocessing stuff from scratch...
use SGMLS;			# Use the SGMLS package.

#My variables
my @stack = ();
my $nextclevel = "01";  #Used to determine where to put the TOC bits.
my $thisclevel =  "01";
my $linenum = 0;
my @groupnums = (0,0,0,0,0,0,0,0,0,0,0,0,0);
my %groups = ();
my $expandgroup = "group01-0";
my $make_top_toc = 0;

#open new SGML file with nsgmls 
open (SGMLH, "$command $sgmlfile|");
my $parse = new SGMLS(SGMLH);
my $event = $parse->next_event;

#open initial HTML file
open (HTMLH, ">$htmldir$subhtmldir$htmlname$htmlcode") || die("Could not open file to write.\n");

open (DEBUGH, ">debug.txt") || die("Cannot open debug file");


#
#Main Loop.
#

while ($event) {
  if ($event->type eq 'start_element') {
    my $element = $event->data;
    my $name = $element->name;
    unless ($ignore{$name}) {
      @stack = (@stack, $event);
    }
    if (my $funcname = $start_process{$name}) {
      &$funcname($element);
    }
  } elsif  ($event->type eq 'end_element') {
    my $element = $event->data; 
    my $name = $element->name;
    unless ($ignore{$name}) {
      @stack = (@stack, $event);
    }
    if (my $funcname = $end_process{$name}) {
      &$funcname($element);
    }
  } else {
    @stack = (@stack, $event);
  }
  $event = $parse->next_event;
}


#End of html generation. Write out ToC in preferred format and we're finished.

if ($JAVASCRIPT) {
  write_js_toc();
} else {
  write_toc();
}

close DEBUGH;

#
#End of main loop. Start of subroutines.
#


#
#Main level element processing subroutines 
#

sub strip_element {
  #zap through until next element is the end of the current one.
  my ($element) = @_;
  while ((my $end = (my $parse = $parse->next_event)->data) != $element) {
    #do something meaningless
  }
}

sub process_header {
  #write the <head> of the html
  @curr_stack1 = @curr_stack = @stack;
  $maxstack = 1;
  make_curr_stack("TITLEPROPER");
  if (my $temptitle = flattext(@curr_stack)) {
    $title = $temptitle;
  }
  pr('<html>', '<head>', '<title>', $title, '</title>', '</head>', '<body bgcolor = "#ffffff">');
  reset_curr_stack();
  if ($header_info) {
    my $href = $htmlname . $htmlcode . "#header";
    add_toc_item($title, $href);
    #Process header information and put at top of HTML.
    #filedesc, profiledesc, revisiondesc, footer
    make_FILEDESC();
    make_PROFILEDESC();
    make_REVISIONDESC();
    make_FOOTER();

    #In a collection level description, there is no DSC tag.

  }
  clear_stack();
}

sub item_info {
  #Make Curr_stack
  @curr_stack1 = @curr_stack = @stack;
  $maxstack = 1;
#  $headinglevel = ($thisclevel + 1);
  $headinglevel = 2;
  $href = "";

  #Are we a silly DROW table?
 if (make_DROW() == 0) {
   
   #Write out info...
   make_DID();
  $headinglevel +=2;
   head_wrap("SCOPECONTENT");
   head_wrap("BIOGHIST");
   make_ADMININFO();
   head_wrap("ODD");
   head_wrap("ORGANIZATION");
   head_wrap("ARRANGEMENT");
   kill_curr_stack("DID");
   head_wrap("NOTE");
   if ($CONCORD) {
      concord();
    }
  $headinglevel-= 2;
 }

$headinglevel -= $thisclevel;
  pr('<hr>');
  clear_stack();
}


sub c_wrapper {
  my ($element) = @_;
  my $name = $element->name;
  $thisclevel = $nextclevel;

  if ($name eq "C") {
    #parse out level from attribs

    my $attrobj = $element->attribute("LEVEL");
    my $levelname = $attrobj->value;
    my $origname = $levelname;
    if ($levelname eq "OTHERLEVEL") {
      $levelname = $element->attribute("OTHERLEVEL")->value;
    }
    $nextclevel = $clevels{$levelname};
  } else {
    #get level from tagname
    $nextclevel = substr($name, 1);
  }
  if (!$nextclevel) {
    print DEBUGH ("Unknown level name: '$levelname'\n");
    print DEBUGH ("Origname: $origname    nextclevel: $nextclevel\n");
    sleep 5;
  }

  item_info();
  check_new_file();
}

sub last_item {
  #hackhackhack.
  $thisclevel = $nextclevel;
  $nextclevel="01";
  item_info();
}


sub make_ADD {
  @curr_stack1 = @curr_stack = @stack;
  $maxstack = 1;

  make_HEAD("Adjunct to the Descriptive Data");
  foreach $tag (@ADDorder) {
    head_wrap($tag);
    kill_curr_stack($tag);
  }
  if (@curr_stack) {
    pr(process_text());
  }
  clear_stack();
}

sub make_eof {
  pr('</body></html>');
  clear_stack();
}

#
# Element level processing subroutines
#



#Top Level Item Elements  


sub make_DID {
  $headinglevel++;

  make_curr_stack("DID");
  my $tocid = make_id();
  make_did_heading($tocid);
#  text_wrap("UNITDATE");  #Uncomment to put in date even if in unittitle


  make_UNITDATE();
  text_wrap("REPOSITORY");
  text_wrap("UNITLOC");
  text_wrap("ORIGINATION");
  text_wrap("PHYSDESC");
  text_wrap("UNITID");
  $headinglevel++;
  head_wrap("NOTE");
  $headinglevel--;
  reset_curr_stack();
  $headinglevel--;
}      


sub make_ADMININFO {
  make_curr_stack("ADMININFO");
  if (@curr_stack && check_text_exists()) {
    make_HEAD("Administrative Information");
    kill_curr_stack("HEAD");
    if ($no_admininfo_order) {
      $text = process_text();
      pr($text);
    } else {
      $headinglevel++;
      foreach $tname (@admininfo_order) {
	if ($tname eq "CUSTODHIST") {
	  kill_curr_stack("ACQINFO");
	}
	head_wrap($tname);
      }
      $headinglevel--;
    }
  }
  reset_curr_stack();
}

    
#
# DID subelements
#

sub make_id {
  #get id from UNITID and make an Anchor.
  #make TOC entry in did_heading
  make_curr_stack("UNITID");
  #look at ID attr first, else use plain text.

  my $id = "";

  if (@curr_stack) {
    my $element = $curr_stack[0]->data;
    if (($id = $element->attribute("ID")) eq "") {
      $id = flattext(@curr_stack);
    } else {
      $id = $id->value;
    }
  }
  if ($id eq "") {
    #What? No UNITID? Grrr....
    $id = "id" . $linenum;
  }


  #Now we need to check for Anchor possibility...
  $id =~ s/\#\\\/ /-/g;
  reset_curr_stack();
  return $id;
}

sub make_did_heading {
  #Not so simple as just <head> as <unittitle> is also possible.
  #If neither, use the ID given as @_[1];
  #Print anchor, heading then add to TOC array. NUMMY :)
  my ($tocid) = @_;
  my $title = "";
  my $tocentry = 1;
  pr('<a name = "' . $tocid . '"></a>');

  make_curr_stack("HEAD");
  if (@curr_stack) {
    $title = process_text(@curr_stack);
    heading($title);
  }
  if (!$title) {
    reset_curr_stack();
    make_curr_stack("UNITTITLE");
    if (@curr_stack) {
      $title = process_text();
      pr("<b>Unit title:</b>  $title");
    }
  }
  if (!$title) {
    #Geez, nothing... use $id  BUT don't put in TOC
    if ($thisclevel == 1) {
      $tocentry = 0;
    }
    $title = $default_title;
  }

  #make id into full href
  $href = $htmlname . $htmlcode . "#" . $tocid;
  $addtitle = $title;
  $addtitle =~ s/\"/\\\"/ig;

  if ($tocentry) {
    add_toc_item($addtitle, $href);
  }
  reset_curr_stack();
}

sub make_DROW {
  if (make_curr_stack("DROW")) {
    reset_curr_stack();
    #Damned purple faced things
    my $len = @curr_stack -1;
    my $startidx = -1;
    
    my $id = make_id();
    make_did_heading($id);

    for (my $index = 0; $index < $len;$index++) {
      my $stobj = $curr_stack[$index];
      if ($stobj && $stobj->type eq 'start_element' && $stobj->data->name eq "DROW") {
	$startidx = $index;
      } elsif ($stobj && $stobj->type eq 'end_element' && $stobj->data->name eq "DROW" && $startidx >= 0) {
	process_DROW($startidx, $index);
	$startidx = -1;
      }
    }
    return 1;
  } 
  reset_curr_stack();
  return 0;
}


sub process_DROW {
  my ($start, $end) = @_;

  my $startidx = -1;
  for (my $index = $start; $index < $end;$index++) {
    my $stobj = $curr_stack[$index];
    if ($stobj && $stobj->type eq 'start_element' && $stobj->data->name eq "DENTRY") {
      $startidx = $index;
    } elsif ($stobj && $stobj->type eq 'end_element' && $stobj->data->name eq "DENTRY" && $startidx >= 0) {
      process_DENTRY($startidx, $index);
      $startidx = -1;
    }
  }
}

sub process_DENTRY {
  my ($start, $end) = @_;
  #No restrictions that a dentry will only contain one tag
  #Step through every tag available... Yicky.

  $maxstack++;
  my $newname = "curr_stack" . $maxstack;
  @$newname = @curr_stack[$start..$end];
  @curr_stack = @$newname;
  
  make_ADMININFO();
  head_wrap("ARRANGEMENT");
  head_wrap("BIOGHIST");
  head_wrap("NOTE");
  head_wrap("ODD");
  head_wrap("ORGANIZATION");
  head_wrap("SCOPECONTENT");
  text_wrap("PHYSDESC");
  text_wrap("REPOSITORY");
  text_wrap("UNITDATE");
  text_wrap("UNITLOC");

reset_curr_stack();

}

sub make_UNITDATE {
  make_curr_stack("UNITDATE");
  if (@curr_stack && check_text_exists()) {
    if ($curr_stack[0]->data->within("UNITTITLE") == '') {
      pr($textwrapfuncs{"UNITDATE"});
      $text = process_text();
      pr($text);
    }
  }
  reset_curr_stack();
}

#
# EADHEADER subroutines
#

sub make_FILEDESC {
  make_curr_stack("FILEDESC");
  if (@curr_stack && check_text_exists()) {
    #editionstmt notestmt publicationstmt seriesstmt titlestmt
    my @FILEDESC_order = ("TITLE", "SERIES", "PUBLICATION", "EDITION", "NOTE");
    foreach $fdt (@FILEDESC_order) {
      &{"make_" . $fdt . "STMT"}()
    }
  }
  reset_curr_stack();
}

sub make_PROFILEDESC {
  make_curr_stack("PROFILEDESC");
  if (@curr_stack && check_text_exists()) {
    #Creation langusage
    text_wrap("CREATION");
  }
  reset_curr_stack();
}

sub make_REVISIONDESC {
  make_curr_stack("REVISIONDESC");
  if (@curr_stack && check_text_exists()) {
    #list change
    pr ("<p><b>Changes</b>: ");
    make_curr_stack("LIST");
    if (@curr_stack == ()) {
      pr('<ul>');
      reset_curr_stack();
      pr(process_text(@curr_stack));
      pr('</ul>');
    } else {
      pr(process_text(@curr_stack));
    }
  }
  reset_curr_stack();
}

sub make_FOOTER {
  make_curr_stack("FOOTER");
  if (@curr_stack && check_text_exists()) {
    $footer = process_text(@curr_stack);
  }
  reset_curr_stack();
}

    #editionstmt notestmt publicationstmt seriesstmt titlestmt

sub make_EDITIONSTMT {
  make_curr_stack("EDITIONSTMT");
  if (@curr_stack && check_text_exists()) {
    reset_curr_stack();
    text_wrap("EDITIONSTMT");
  } else {
    reset_curr_stack();
  }
}

sub make_NOTESTMT {
  make_curr_stack("NOTESTMT");
  if (@curr_stack && check_text_exists()) {
    $headinglevel = 4;
    while (@curr_stack) {
      head_wrap("NOTE");
      kill_curr_stack("NOTE");
      make_curr_stack("NOTE");
    }
  }
  reset_curr_stack();
}

sub make_PUBLICATIONSTMT {
  make_curr_stack("PUBLICATIONSTMT");
  if (@curr_stack && check_text_exists()) {
    #publisher address text
    text_wrap("PUBLISHER");
    kill_curr_stack("PUBLISHER");
    pr("<br>");
    pr(process_text(@curr_stack));
  }
  reset_curr_stack();
}

sub make_SERIESSTMT {
  make_curr_stack("SERIESSTMT");
  if (@curr_stack && check_text_exists()) {
    pr(process_text(@curr_stack));
  }
  reset_curr_stack();
}

sub make_TITLESTMT {
  make_curr_stack("TITLESTMT");
  if (@curr_stack) {
    foreach $tti ("TITLEPROPER", "SUBTITLE", "AUTHOR", "SPONSOR") {
      &{"make_" . $tti}();
    }
  }
  reset_curr_stack();
}


sub make_TITLEPROPER {
  make_curr_stack("TITLEPROPER");
  if (@curr_stack && check_text_exists()) {
    $headinglevel = 1;
    heading(flattext(@curr_stack));
  }
reset_curr_stack();
}

sub make_SUBTITLE {
  make_curr_stack("SUBTITLE");
  if (@curr_stack && check_text_exists()) {
    $headinglevel = 2;
    heading (flattext(@curr_stack));
  }
  reset_curr_stack();
}

sub make_AUTHOR {
text_wrap("AUTHOR");
}

sub make_SPONSOR {
 text_wrap("SPONSOR");
}

#
# HEAD
#

sub make_HEAD {
  my ($title) = @_;
  make_curr_stack("HEAD");
  if (@curr_stack && check_text_exists()) {
    heading(process_text());
  } else {
    heading($title);
  }
reset_curr_stack();
}


#
#Processing Subroutines
#

sub pr {
  foreach $bit (@_) {
    print HTMLH "$bit\n";
  }
}

sub clear_stack {
  #undef stack objects
  foreach $stobj (@stack) {
    undef($stobj);
  }
  #undef stacks
  @stack = ();
  @curr_stack = ();
}

sub make_curr_stack {
  #make a new current stack and put it in curr_stack.
  my ($ename) = @_;
  my  $begin = $end = -16;
  my $length = @curr_stack;
  my $startobj = "";

  my $index = -1;
  SEARCH : foreach $stackobj (@curr_stack) {
    $index++;
      if ($stackobj->type eq 'start_element' && $stackobj->data->name eq $ename) {
	$startobj = $stackobj->data;
	$begin = $index;
      } elsif ($stackobj->type =~ /^end_element/ && ref($startobj) && $stackobj->data == $startobj) {
	my $stopobj = $stackobj->data;
	$end = $index;
	last SEARCH;
      }
  }

  if ($begin >= 0 && $end >= 0) {
    @curr_stack = @curr_stack[$begin..$end];
    @start_indices = (@start_indices, $begin);
    @end_indices = (@end_indices, $end);
    $maxstack++;
    $newname = "curr_stack" . $maxstack;
    @$newname = @curr_stack;
  } else {
    $maxstack++;
    $newname = "curr_stack" . $maxstack;
    @$newname = ();
    @curr_stack = ();
  }
}

sub kill_curr_stack {
  my ($ename) = @_;
  my $begin = my $end = -1;
  my $length = @curr_stack;
  my $startobj = "";
  
  SEARCH : for (my $index = 0; $index < $length; $index++) {
    $stackobj = $curr_stack[$index];
    if ($stackobj) {
      if ($stackobj->type eq 'start_element' && $stackobj->data->name eq $ename) {
	$startobj = $stackobj->data;
	$begin = $index;
      } elsif (($stackobj->type eq 'end_element') && ($stackobj->data == $startobj)) {
	my $stopobj = $stackobj->data;
	$end = $index;
	last SEARCH;
      }
    }
  }
  if ($begin >= 0 && $end >= 0) {  
    @curr_stack = (@curr_stack[0..$begin-1], @curr_stack[$end+1..$length-1]);
  }
}

sub print_curr_stack {

  #Print to stdout for debugging.

  foreach $item (@curr_stack) {
    if ($item->type eq 'start_element') {
      print "<" . $item->data->name . ">\n";
    } elsif ($item->type eq 'end_element') {
      print "</" . $item->data->name . ">\n";      
    } elsif ($item->type eq 'cdata' || $item->type eq 'sdata') {
      print $item->data . "\n";
    } elsif ($item->type eq 're') {
      print "\n";
    } else {
      print "Object of type: " . $item->type . "\n";
    }
  }
}

sub reset_curr_stack {
  $maxstack--;
  my $name = "curr_stack" . $maxstack;
  @curr_stack = @$name;
}


sub flattext {
  my @ftstack = @_;
  my $text = "";
  for $ftsi (@ftstack) {
    if ($ftsi->type eq 'cdata') {
      $text  .= $ftsi->data;
    } elsif ($ftsi->type eq 'start_element' && $ftsi->data->name == "LB") {
      $text .= " ";
    }
  }
  return $text;
}

sub process_text {
  my @textstack = @_;
  if (!@textstack) {
    @textstack = @curr_stack;
  }

  #Step through, process elements and cdata, return string of text. Gak.
  my $text = "";
  my $len = @textstack;
  
  for ($index = 0; $index < $len; $index++) {
    $stobj = $textstack[$index];
    if ($stobj) {
      if ($stobj->type eq 'start_element') {
	my $element = $stobj->data;
	my $name = $element->name;
	if ((my $nt = $substitutes{$name}) && $name ne "ADDRESSLINE") {
	  $text .= "<$nt>";
	} elsif ($name eq "EMPH") {
	  if (my $render = $element->attribute("RENDER")) {
	    $nt = $emphsubstart{$render->value};
	  } else {
	    $nt = "<B>";
	  }
	  $text .= $nt;
	} elsif ($name eq "EXTREF") {
	  if (my $attrobj = $element->attribute("HREF")) {
	    $text .= "<a href = \"" . $attrobj->value . "\">";
	  } elsif (my $attrobj =$element->attribute("EXT.PTR")) {
	    $text .= "<a href = \"" . $attrobj->value . "\">";
	  }
	}
      } elsif ($stobj-> type eq 'end_element') {
	my $element = $stobj->data;
	my $name = $element->name;
	if ((my $nt = $substitutes{$name}) && $name ne "LB" && $name ne "DIV") {
	  $text .= "</$nt>";
	} elsif ($name eq "EMPH") {
	  if (my $render = $element->attribute("RENDER")) {
	    $nt = $emphsubend{$render->value};
	  } else {
	    $nt = "<B>";
	  }
	  $text .= $nt;
	} elsif ($name eq "EXTREF") {
	  $text .= "</a>";
	}
#      } elsif ($stobj->type eq 'entity') {
#	print $stobj->data->name;
      } elsif ($stobj->type eq 'cdata') {
	$text .= $stobj->data;
      } elsif ($stobj->type eq 'sdata') {
	my $data = $stobj->data;
	foreach $foo (keys %entities) {
	  if ($data =~ /$foo/gi) {
	    $text .= $entities{$foo};
	  }
	}
      } elsif ($stobj->type eq 're') {
	#Put extra space for a record end. It likes it... happy script.... patpatpat
	$text .= " ";
      }
    }
  }
  return $text;
}


sub head_wrap {
  my ($ename) = @_;
  make_curr_stack($ename);
  if (@curr_stack && check_text_exists()) {
    make_HEAD($headwrapfuncs{$ename});
    kill_curr_stack("HEAD");
    $text = process_text();
    pr($text);
  }
  reset_curr_stack();
}  


sub text_wrap {
  my ($ename) = @_;
  make_curr_stack($ename);
  if (@curr_stack && check_text_exists()) {
    pr($textwrapfuncs{$ename});
    $text = process_text();
    pr($text);
  }
  reset_curr_stack();
}

sub heading {
  my ($text) = @_;
  pr($beginheadings[$headinglevel] . $text . $endheadings[$headinglevel]);
}

sub add_toc_item {
  my ($title, $href) = @_; 
  my $expand = $nextclevel == $thisclevel +1 ? 1 : 0;

#truncate href to X characters
#Need to cut at a space for entities in the HTML

  if (length($title) > 42) {
    $title = substr($title, 0, index($title, " ", 32) + 32) . "...";
  }

  my $currarrline = "arrline" . $linenum;
  @$currarrline = ($title, $href, $expand);
  my $groupname = "group"  . $thisclevel . "-" . $groupnums[$thisclevel];
  @$groupname = (@$groupname, $linenum);

  if ($expand) {
    $groupnums[$nextclevel] += 1;
    $ngroupname = "group" . $nextclevel . "-" . $groupnums[$nextclevel];
    $groups["$linenum"] = $ngroupname;
  }

  print DEBUGH "$groupname: added $href";
  if ($expand) {
    print DEBUGH " expands into $ngroupname.";
  }
  print DEBUGH "\n";

  $linenum++;
}

sub print_navbar {
  unless ($filenumber eq "001" || $filenumber eq "1") {
    $previous = "[ <a href = \"$subhtmldir$basename" . ($filenumber -1) . "$htmlcode\">previous</a> ]"; 
  } else {
    $previous = "[ <a href = \"$subhtmldir$firsthtmlname$htmlcode\">previous</a> ]";
  }
  my $top = "[ <a href = \"$subhtmldir$firsthtmlname$htmlcode\">top</a> ]";
  my $next = "[ <a href = \"$subhtmldir$basename" . ($filenumber + 1) . "$htmlcode\">next</a> ]";

  if ($filenumber eq "000") {
    pr("<center>$next</center>");
  } else {
    pr("<table width = \"100%\"><tr><td>$previous</td><td>$top</td><td align = right>$next</td></tr></table>");
  }

}

sub check_text_exists {
  #Check that there is text in the stack to print...
  foreach $stitem (@curr_stack) {
    if ($stitem->type eq "cdata") {
      return 1;
    }
  }
  return 0;
}


sub check_new_file {
  #If current file is longer than 30k, split to a new file.

  @sizes = ();
  if ($slash ne "/") {
    open (NHTMLH, "$htmldir$subhtmldir$htmlname$htmlcode");
    @sizes = stat(NHTMLH);
    close (NHTMLH);
  } else {
    @sizes = stat("$htmldir$subhtmldir$htmlname$htmlcode");
  }
  
  $size = $sizes[7];
  if ($size > 30000) {
    pr($footer);
    print_navbar();
    pr('</body>', '</html>');
    close HTMLH;
    $filenumber++;
    $htmlname = $basename . $filenumber;
    open (HTMLH, ">$htmldir$subhtmldir$htmlname$htmlcode");
    pr ('<html>', '<head>', "<title>$title</title>", '</head>', '<body bgcolor = "#ffffff">');
    print_navbar();
  }
}

sub concord {
  #This is going to be messy...
  #Concord separately for Name Subject Corpname Geogname Genreform Famname?
}


sub write_toc {
  #Just write down the ToC fully expanded and static.

  open (TOC, ">$htmldir$framesetname");
  print TOC '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">' . "\n";
  print TOC "<html>\n";
  print TOC " <head>\n";
  print TOC "<title>$title</title>\n";
  print TOC "<base href = \"$htmlpath\">\n";
  print TOC "</head>\n<body bgcolor = white>\n";
  print TOC "<center><h3>Table of Contents</h3></center>\n";
  print TOC "<table cellpadding = 0 cellspacing = 0 border = 0 width = 100%>\n";


  print TOC "<tr><td><A href = \"$href\">$name</A></td></tr>";

#Unfinished...

}


sub get_js_tocline {
  my ($index) = @_; 
  my @tocarrayline = @{"arrline" . $index}; 
  #put in number of items for branches
  if ($tocarrayline[2] ==1) {
    my $newname = $groups["$index"];
    my $nlen = @{$newname};
    if ($nlen == 1) {
      $item = "item";
    } else {
      $item = "items";
    }
    $tocarrayline[0] .= " <i>($nlen $item)</i>";
  }
  my $tocline = 'new Array("' . $tocarrayline[0] . '", "' . $tocarrayline[1] . '", ' . $tocarrayline[2];
  if ($tocarrayline[2] == 1) {
    $tocline .= ', new Array(';
    my $newname = $groups["$index"];
    print DEBUGH "$index => $newname\n";
    my $nlen = @{$newname};
    my $i = 0;
    foreach $newindex (@{$newname}) {
      print DEBUGH "got $newindex.\n";
      $tocline .= get_js_tocline($newindex);
      if ($i < $nlen -1) {
	$tocline .= ",";
      }
      $i++;
    }
  $tocline .= ')';
}
$tocline .= ')';
return $tocline;
}

sub write_js_toc {
  #Write out javascript ToC from arrays

  @jstocarray = ();
  $tn = $ttl_idxs = 0;
  $more = 1;

  if ($spliteachtop && $linenum < $max_toc_entries) {
    $spliteachtop = 0;
  }
  
  my @usedidxs = ();

  foreach $index (@$expandgroup) {
    if ($index == @$expandgroup[$#$expandgroup]  ) {
      $more = 0;
    }

    if (!@jstocarray) {
      @usedidxs = (@usedidxs, $index);
    }

    $jsbit = get_js_tocline($index);
    if ($jsbit ne "") { 
      $jsline = "this.toc$tn = " . $jsbit . ";";
      @jstocarray = (@jstocarray, $jsline);
      $tn++;
    }

    if (($index - $ttl_idxs > $max_toc_entries) || $spliteachtop ) {
      $ttl_idxs = $index;
      $tn--;
      write_js_toc_page($more, $tn, @jstocarray);
      $tn = 0;
      @jstocarray = ();
    }

  }
  $tn--;
  write_js_toc_page($more, $tn, @jstocarray);


  if ($make_top_toc) {
    #write index to indices
    open (JSTOC, ">$htmldir$framesetname$htmlcode");
    
    $htmltxt = '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<title>' . $title . '</title>
<base href = ' . $htmlpath . '>
<!-- This page needs to be made more attractive! -->
</head>
<body bgcolor = "#ffffff">
<center><h4>' . $title . '</h4></center>
<p>
<ul>
';

    $num = 1;
    $baseletter = "a";
    print DEBUGH "max file: $framesetnum\n";

    until ($baseletter eq $framesetnum) {
      $nidx = $usedidxs[$num-1];
      @entry = @{"arrline" . $nidx};
      $name = $entry[0];
      $htmltxt .= ("<li><a href = \"" . $framesetname . $baseletter . $htmlcode . "\">Section " . $num . ": " . $name . "</a>");
      print DEBUGH "adding $framesetname$baseletter: \n";
      $baseletter++;
      $num++;
    } 

    
    
$htmltxt .= '</ul>
</body>
</html>
';
    
    print JSTOC $htmltxt;
    close JSTOC;
  }
  
}


sub write_js_toc_page {
  my ($more, $tn, @jstocarray) = @_;
  
  if ($more) {
    print DEBUGH "Multiple ToCs...\n";
    if (!$framesetnum) {
      $framesetnum = "a";
    }  else {
      $framesetnum++;
    }
    $make_top_toc = 1;
  }
  if (!$more && $framesetnum) {
    $framesetnum++;
  }
  
  open (JSTOC, ">$htmldir$framesetname$framesetnum$htmlcode");
  print JSTOC '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">' . "\n";
  print JSTOC '<html>' . "\n";
  print JSTOC ' <head>' . "\n";
  print JSTOC ' <title>' . $title . '</title>' . "\n";
  print JSTOC " <base href = \"$htmlpath\">\n";
  print JSTOC '<script>' . "\n";
  print JSTOC '<!--' . "\n";
  print JSTOC "MAX_LENGTH = " . $tn . ";\n";
  print JSTOC 'level = -1;' . "\n";
  print JSTOC 'expanding = new Array();' . "\n";
  foreach $line (@jstocarray) {
    print JSTOC "$line\n";
  }

  #rewrite into file.
  $eoframe = 'function redraw() {
  writeto= this.frames[0];
  writeto.document.open();
  writeto.document.writeln(\'<html><head><title>' . $tocHeading . '</title>\', 
			   \'<base href = "' . $htmlpath . '">\', 
\'</head><body bgcolor = "#ffffff">\');
  writeto.document.write(\'<center><h3>' . $tocHeading . '</h3></center>';

  my $table = "<table cellpadding = $toctabpad cellspacing = $toctabspace width = 100% border = $toctabborder bgcolor = $toctabbg>";
  

  $eoframe .=  $table . '\');
   for (i = 0; i <= MAX_LENGTH; i++) {
     identifier = "toc" + i;
    levelnums = new Array(0,0,0,0,0,0,0,0,0,0,0,0);
    process_item(this[identifier], -1, identifier, levelnums);
  }
  writeto.document.write(\'</table>\');
  writeto.document.writeln(\'</body></html>\');
  writeto.document.close();
}

function Toggle(id, expandall) {
  idarray = id.split("-");
  /*  arrayname = idarray.shift(); Not under IE4.0 */

  arrayname= idarray[0];
      if ((len = idarray.length) > 1) {
    idarray[len] = "";
    /*    idarray = idarray.slice(1); Not under NS3.0  */
    for (i = 0; i < len; i++) {
      idarray[i] = idarray[i+1];
    }
  } else {
    idarray = new Array();
  }

  array = this[arrayname];
  for (i in idarray) {
    if (idarray[i] != "") {
      array = array[3][idarray[i]];
    }
  }
  array[2] = (array[2] == 1) ? 2 : 1;

  if (expandall) {
    expanding[expanding.length] = id;
    array[2] = 2;
}
  redraw();
}

function process_item(item, level, identifier, levelnums) {
  /* Must reinit all vars (Grr) cos called from lower level redrawn frames */
  GRAPHICS = ' . $graphics . ';
  SPACES = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
  symbols = "*+-";
  graphics = new Array(\'<img src = "'. $itemfile . '" border = "0" height = "15" width = "15">\', \'<img src = "'. $expandfile . '" border = "0" width = 14 height = 14>\', \'<img src = "' . $contractfile . '" border = "0" width = 14 height = 14>\');
  writeto = this.frames[0];
  text = item[0];
  href = item[1];
  colours = new Array(';

    for ($jsn = 0; $jsn < 10; $jsn++) {
      $eoframe .= "\'<font color = \"" . $js_colours[$jsn] . "\">\'";
      if ($jsn != 9) {
	$eoframe .= ", ";
      }
    }
  $eoframe .= ");";

$eoframe .= 
  'level++;
  levelnums[level]++;
  spaces = "";
  onespace = "<td>&nbsp;</td>";
  for (x=0; x < level; x++) {
    spaces = spaces + onespace;
  }
  cols = 25 - level;
  text = text.small();
  text = colours[level] + text + "</font>";

  joined = "#" + expanding.join(\'**\') + \'**\';
  inexpanding = joined.indexOf(identifier.substring(0, identifier.lastIndexOf("-")) + \'**\');

  if (levelnums[level] >= 10 && inexpanding < 1) { 
      
    togglesym = \'' . $expanddir . '\'.link(\'javascript:parent[\\\'Toggle\\\'](\\\'\' + identifier.substring(0, identifier.lastIndexOf("-"))    + \'\\\', 1)\');
    writeto.document.writeln(\'<tr>\' + spaces + \'<td colspan = "\' + cols + \'"> &nbsp; &nbsp;\' + togglesym + \'</td></tr>\', "\n");
    return 1;
  }

  if (href) {
    href = \'<a href = "\' + href + \'" target = "dest">\' + text + "</a>";
   } else {
     href = text;
   }

  if (!GRAPHICS) {
    symbol = symbols.charAt(item[2]);
  } else {
    symbol = graphics[item[2]];
  }

  togglesym = item[2] == 0 ? symbol  :  symbol.link("javascript:parent[\'Toggle\'](\'" + identifier + "\')");

  writeto.document.writeln(\'<tr>\' +spaces + \'<td colspan = "\' + cols + \'">\' + togglesym + href +\'</td></tr>\', "\n");
  
  if (item[2] == 2) {
    for (link in item[3]) {
      identifier = identifier + "-" + link;
end = process_item(item[3][link], level, identifier, levelnums);
      identifier = identifier.substring(0, identifier.lastIndexOf("-"));
      if (end) {
         break;
      }
    }
  } 

levelnums[level+1] = 0;
  level--;
return 0;
}

//-->
</script>

  </head>';
  print JSTOC $eoframe;
  print JSTOC (
' <frameset rows= 90%,*>
  <FRAMESET COLS="45%,*">
    <FRAME SRC="'. $tocframename .  '" NAME = "toc">
    <FRAME SRC="'. $firsthtmlname . $htmlcode . '" NAME = "dest">
  </FRAMESET>
  <frame src = "http://sca.lib.liv.ac.uk/ead/search.html" NAME="search">
</frameset>
');

  close JSTOC;


#print tocf.html

$tocftxt = '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
<head>
<title>' . $tocHeading . '</title>
<base href = "' . $htmlpath . '">
<script>
<!--
function Toggle(identifier) {
parent["Toggle"](identifier);
}
//-->
</script>

</head>

<body bgcolor = "#ffffff">
<center><h3>' . $tocHeading . '</h3></center>
<script>
<!-- Hide

document.write(\'<table border = ' . $toctabborder . ' cellspacing = ' . $toctabspace .  'cellpadding = ' . $toctabpad . ' width = 100% bgcolor = ' . $toctabbg . '>\');
for (i = 0; i <= parent["MAX_LENGTH"]; i++) {
  identifier = "toc" + i;
  levelnums = new Array(0,0,0,0,0,0,0,0,0,0,0,0);
parent["process_item"](parent[identifier], -1, identifier, levelnums);
}
document.write(\'</table>\');

//-->
</script>
   </body>
</html>
';

  open (TOCH, ">$htmldir$subhtmldir$tocframename") || die ("Cannot open $htmldir$subhtmldir$tocframename\n");
  print TOCH $tocftxt;
  close TOCH;
}


